datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Core Models
model Doctor {
  id                          String                       @id @default(cuid())
  clerkUserId                 String                       @unique
  email                       String                       @unique
  name                        String
  lastName                    String?
  profilePicture              String?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  defaultChartView            ChartViewType                @default(FOCUSED)
  subscription                Subscription?
  profile                     DoctorProfile?
  staff                       Staff[]
  patients                    Patient[]
  calculations                Calculation[]
  appointments                Appointment[]
  accessLogs                  FeatureAccessLog[]
  prescriptions               Prescription[]
  inventory                   Inventory[]
  invoices                    Invoice[]
  analytics                   Analytics[]
  patientMetrics              PatientMetrics[]
  financialMetrics            FinancialMetrics[]
  emailNotifications          EmailNotification[]
  doctorAvailability          DoctorAvailability[]
  doctorAvailabilityOverrides DoctorAvailabilityOverride[]
  appointmentSlots            AppointmentSlot[]
  auditLogs                   AuditLog[]                   // NEW: Track who made changes
}

model Patient {
  id                 String                @id @default(cuid())
  doctorId           String
  doctor             Doctor                @relation(fields: [doctorId], references: [id])
  // Personal Information
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  gender             Gender
  // Contact Information
  email              String?
  phoneNumber        String?
  secondaryPhone     String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  // Medical Information
  bloodType          BloodType?
  allergies          String?
  medications        String?
  medicalNotes       String?
  insuranceInfo      Json?
  emergencyContact   Json?
  // Guardian Information
  guardianName       String?
  guardianPhone      String?
  guardianEmail      String?
  guardianRelation   GuardianRelationType?
  // Relationships
  calculations       Calculation[]
  charts             Chart[]
  appointments       Appointment[]
  emailNotifications EmailNotification[]
  medicalHistory     MedicalHistory[]
  surgeries          Surgery[]
  prescriptions      Prescription[]
  vaccinations       Vaccination[]
  labResults         LabResult[]
  invoices           Invoice[]
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

// Staff and Clinic Management
model Staff {
  id             String       @id @default(cuid())
  doctorId       String
  doctor         Doctor       @relation(fields: [doctorId], references: [id])
  email          String       @unique
  firstName      String
  lastName       String
  role           StaffRole
  status         StaffStatus  @default(ACTIVE)
  permissions    Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdById    String       // NEW: Track who created this staff member
  lastLoginAt    DateTime?    // NEW: Track last login time
  loginCount     Int          @default(0) // NEW: Track login count
  staffPermissions StaffPermission[] // NEW: Many-to-many relation for granular permissions
}

// NEW: Model for tracking granular staff permissions
model StaffPermission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g. "patients.view", "appointments.create"
  description String   // Description of what this permission allows
  createdAt   DateTime @default(now())
  staff       Staff[]  // Many-to-many relationship with staff
}

// NEW: Model for tracking all changes (audit trail)
model AuditLog {
  id            String       @id @default(cuid())
  timestamp     DateTime     @default(now())
  entityType    EntityType   // What kind of data was modified
  entityId      String       // ID of the entity that was modified
  action        ActionType   // Create, Update, Delete
  doctorId      String       // Doctor who owns the entity
  doctor        Doctor       @relation(fields: [doctorId], references: [id])
  performedBy   String       // ID of user who performed the action (could be doctor or staff)
  performedByType UserType   // Type of user who performed the action
  oldData       Json?        // Previous state (for updates)
  newData       Json?        // New state
  ipAddress     String?      // IP address of the user
  userAgent     String?      // Browser/device info
  changedFields String[]     // Which fields were changed
}

// Medical Records
model MedicalHistory {
  id          String   @id @default(cuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  condition   String
  diagnosedAt DateTime
  status      String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Surgery {
  id            String   @id @default(cuid())
  patientId     String
  patient       Patient  @relation(fields: [patientId], references: [id])
  procedureName String
  date          DateTime
  surgeon       String
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Prescription {
  id          String             @id @default(cuid())
  patientId   String
  patient     Patient            @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor             @relation(fields: [doctorId], references: [id])
  medications Json[]
  issuedAt    DateTime           @default(now())
  validUntil  DateTime
  status      PrescriptionStatus @default(ACTIVE)
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Vaccination {
  id             String    @id @default(cuid())
  patientId      String
  patient        Patient   @relation(fields: [patientId], references: [id])
  vaccineName    String
  doseNumber     Int
  administeredAt DateTime
  nextDoseDate   DateTime?
  batchNumber    String?
  administeredBy String
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model LabResult {
  id        String          @id @default(cuid())
  patientId String
  patient   Patient         @relation(fields: [patientId], references: [id])
  testName  String
  testDate  DateTime
  results   Json
  labName   String
  reportUrl String?
  status    LabResultStatus
  notes     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// Appointments and Calculations
model Appointment {
  id        String  @id @default(cuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor  @relation(fields: [doctorId], references: [id])

  // Consultation Details
  datetime           DateTime
  status             AppointmentStatus
  consultationMotive String? // Reason for consultation
  presentedSymptoms  Json? // Symptoms presented (can be a structured JSON)

  // Medical Assessment
  physicalExamFindings Json? // Findings from physical examination
  initialObservations  Json? // Initial clinical observations

  // Diagnostic Information
  diagnoses       Json? // Possible multiple diagnoses
  diagnosticNotes String? // Additional diagnostic notes

  // Treatment Details
  treatments            Json? // Treatments or recommendations
  prescribedMedications Json? // Structured medication information

  // Follow-up and Studies
  requestedStudies Json? // Requested medical studies or lab tests
  studyResults     Json? // Results of studies

  followUpDate  DateTime? // Next follow-up appointment date
  followUpNotes Json? // Notes for follow-up

  type              String?
  notes             Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  appointmentSlotId String?          @unique // Add @unique here
  appointmentSlot   AppointmentSlot? @relation(fields: [appointmentSlotId], references: [id])
}

model Calculation {
  id        String          @id @default(cuid())
  patientId String
  patient   Patient         @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor          @relation(fields: [doctorId], references: [id])
  type      CalculationType
  date      DateTime        @default(now())
  inputData Json
  results   Json
  notes     String?
  createdAt DateTime        @default(now())
  charts    Chart[]
}

model Chart {
  id                 String              @id @default(cuid())
  patientId          String
  patient            Patient             @relation(fields: [patientId], references: [id])
  calculationId      String
  calculation        Calculation         @relation(fields: [calculationId], references: [id])
  type               ChartType
  imageUrl           String?
  pdfUrl             String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  emailNotifications EmailNotification[]
}

// Inventory Management
model Inventory {
  id           String                 @id @default(cuid())
  doctorId     String
  doctor       Doctor                 @relation(fields: [doctorId], references: [id])
  itemName     String
  category     String
  quantity     Int
  unit         String
  minThreshold Int
  expiryDate   DateTime?
  supplier     String?
  transactions InventoryTransaction[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model InventoryTransaction {
  id          String          @id @default(cuid())
  inventoryId String
  inventory   Inventory       @relation(fields: [inventoryId], references: [id])
  type        TransactionType
  quantity    Int
  notes       String?
  createdAt   DateTime        @default(now())
}

// Billing and Invoicing
model Invoice {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  patientId     String
  patient       Patient        @relation(fields: [patientId], references: [id])
  doctorId      String
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  date          DateTime       @default(now())
  dueDate       DateTime
  status        InvoiceStatus  @default(PENDING)
  subtotal      Float
  tax           Float          @default(0)
  total         Float
  paidAmount    Float          @default(0)
  balance       Float
  paymentMethod PaymentMethod?
  items         InvoiceItem[]
  payments      Payment[]
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model InvoiceItem {
  id          String      @id @default(cuid())
  invoiceId   String
  invoice     Invoice     @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Int
  unitPrice   Float
  total       Float
  type        ServiceType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Payment {
  id        String        @id @default(cuid())
  invoiceId String
  invoice   Invoice       @relation(fields: [invoiceId], references: [id])
  amount    Float
  method    PaymentMethod
  status    PaymentStatus
  reference String?
  date      DateTime      @default(now())
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Notifications and Logs
model EmailNotification {
  id        String   @id @default(cuid())
  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])

  type   EmailType
  sentAt DateTime    @default(now())
  status EmailStatus

  chartId String? // Link to the specific chart being sent
  chart   Chart?  @relation(fields: [chartId], references: [id])

  pdfUrl       String? // URL of the generated PDF
  emailSubject String? // Subject of the email

  openedAt         DateTime? // Track when email was opened
  clickedAt        DateTime? // Track when links in email were clicked
  deliveryAttempts Int       @default(1)
  errorMessage     String? // Store any email sending errors

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  recipientEmail String?
}

model FeatureAccessLog {
  id         String   @id @default(cuid())
  doctorId   String
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  feature    Feature
  granted    Boolean
  accessedAt DateTime @default(now())
  error      String?
}

// Analytics and Metrics
model Analytics {
  id        String        @id @default(cuid())
  doctorId  String
  doctor    Doctor        @relation(fields: [doctorId], references: [id])
  date      DateTime      @default(now())
  metrics   Json
  type      AnalyticsType
  createdAt DateTime      @default(now())
}

model PatientMetrics {
  id             String   @id @default(cuid())
  doctorId       String
  doctor         Doctor   @relation(fields: [doctorId], references: [id])
  date           DateTime @default(now())
  totalPatients  Int
  newPatients    Int
  activePatients Int
  demographics   Json
  conditions     Json
  createdAt      DateTime @default(now())
}

model FinancialMetrics {
  id               String   @id @default(cuid())
  doctorId         String
  doctor           Doctor   @relation(fields: [doctorId], references: [id])
  date             DateTime @default(now())
  revenue          Float
  expenses         Float
  outstanding      Float
  serviceBreakdown Json
  paymentMethods   Json
  createdAt        DateTime @default(now())
}

// Subscription and Profile
model Subscription {
  id                   String                @id @default(cuid())
  doctorId             String                @unique
  doctor               Doctor                @relation(fields: [doctorId], references: [id])
  stripeCustomerId     String                @unique
  stripePriceId        String
  stripeSubscriptionId String                @unique
  status               SubscriptionStatus
  plan                 PlanType              @default(STARTER) // Changed from FREE to STARTER
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  gracePeriodEnd       DateTime?
  canceledAt           DateTime?
  paymentFailures      Int                   @default(0)
  lastPaymentIntent    String?
  lastPaymentStatus    PaymentStatus?
  features             SubscriptionFeature[]
  staffCount           Int                   @default(0) // NEW: Track current staff count
  customPriceAmount    Float?                // NEW: For enterprise custom pricing
  customPriceInterval  String?               // NEW: 'month' or 'year'
  enterpriseDetails    Json?                 // NEW: Store enterprise-specific details
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model SubscriptionFeature {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  feature        Feature
  enabled        Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([subscriptionId, feature])
}

model DoctorProfile {
  id             String   @id @default(cuid())
  doctorId       String   @unique
  doctor         Doctor   @relation(fields: [doctorId], references: [id])
  prefix         String?
  specialty      String?
  licenseNumber  String?
  phoneNumber    String?
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  logoUrl        String?
  signatureUrl   String?
  clinicName     String?
  primaryColor   String?
  secondaryColor String?
  headerText     String?
  footerText     String?
  website        String?
  socialMedia    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model DoctorAvailability {
  id           String                    @id @default(cuid())
  doctorId     String
  doctor       Doctor                    @relation(fields: [doctorId], references: [id])
  dayOfWeek    Int // 0-6 representing days of the week
  startTime    String // e.g., "09:00"
  endTime      String // e.g., "17:00"
  slotDuration Int                       @default(60) // slot duration in minutes
  isActive     Boolean                   @default(true)
  breaks       DoctorAvailabilityBreak[] // New relation field
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model DoctorAvailabilityBreak {
  id                   String             @id @default(cuid())
  doctorAvailability   DoctorAvailability @relation(fields: [doctorAvailabilityId], references: [id], onDelete: Cascade)
  doctorAvailabilityId String

  startTime String
  endTime   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorAvailabilityOverride {
  id       String @id @default(cuid())
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  date        DateTime
  isAvailable Boolean
  startTime   String?
  endTime     String?
  reason      String?

  // New fields for slot-level overrides
  slotId          String?   // ID of the specific time slot (format: "09:00-09:30")
  slotIsAvailable Boolean?  // Whether the specific slot is available

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppointmentSlot {
  id       String @id @default(cuid())
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  startTime DateTime
  endTime   DateTime
  status    SlotStatus @default(AVAILABLE)

  appointment Appointment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NEW: Enums for audit logging and user types
enum EntityType {
  PATIENT
  APPOINTMENT
  PRESCRIPTION
  CALCULATION
  CHART
  STAFF
  INVOICE
  PAYMENT
  INVENTORY
  DOCTOR_PROFILE
  DOCTOR_AVAILABILITY
  SUBSCRIPTION
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
}

enum UserType {
  DOCTOR
  STAFF
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

// Enums
enum Gender {
  MALE
  FEMALE
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum GuardianRelationType {
  MOTHER
  FATHER
  STEPMOTHER
  STEPFATHER
  GRANDMOTHER
  GRANDFATHER
  AUNT
  UNCLE
  SIBLING
  LEGAL_GUARDIAN
  FOSTER_PARENT
  CAREGIVER
  OTHER
}

enum StaffRole {
  RECEPTIONIST
  NURSE
  ASSISTANT
  ADMIN
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum CalculationType {
  GROWTH_PERCENTILE
  BLOOD_PRESSURE
  HEART_RATE
  BILIRUBIN
}

enum ChartType {
  GROWTH_CDC
  GROWTH_WHO
  GROWTH_INTERGROWTH
  BLOOD_PRESSURE
  HEART_RATE
  BILIRUBIN
}

enum TransactionType {
  RECEIVED
  USED
  EXPIRED
  DAMAGED
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum LabResultStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  INSURANCE
  OTHER
}

enum PaymentStatus {
  SUCCEEDED
  FAILED
  PENDING
  REFUNDED
}

enum ServiceType {
  CONSULTATION
  PROCEDURE
  VACCINATION
  LAB_TEST
  MEDICATION
  FOLLOW_UP
  OTHER
}

enum EmailType {
  APPOINTMENT_REMINDER
  CALCULATION_RESULTS
  REPORT_READY
  GENERAL_NOTIFICATION
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
}

// CHANGED: Updated plan types to match the three tiers
enum PlanType {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum Feature {
  GROWTH_CHARTS
  PDF_REPORTS
  EMAIL_REPORTS
  PATIENT_TRACKING
  DATA_EXPORT
  CUSTOM_BRANDING
  STAFF_MANAGEMENT   // NEW: Feature for staff management
  MULTI_LOCATION     // NEW: Feature for enterprise multi-location
  CUSTOM_INTEGRATIONS // NEW: Feature for enterprise integrations
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
}

enum AnalyticsType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ChartViewType {
  FOCUSED
  FULL_CURVE
}